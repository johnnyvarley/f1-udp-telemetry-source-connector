/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package ai.tecton.telemetry.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class CarTelemetryData extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 211776833703098966L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"CarTelemetryData\",\"namespace\":\"ai.tecton.telemetry.avro\",\"fields\":[{\"name\":\"speed\",\"type\":\"int\"},{\"name\":\"throttle\",\"type\":\"float\"},{\"name\":\"steer\",\"type\":\"float\"},{\"name\":\"brake\",\"type\":\"float\"},{\"name\":\"clutch\",\"type\":\"int\"},{\"name\":\"gear\",\"type\":\"int\"},{\"name\":\"engineRPM\",\"type\":\"int\"},{\"name\":\"drs\",\"type\":\"int\"},{\"name\":\"revLightsPercent\",\"type\":\"int\"},{\"name\":\"revLightsBitValue\",\"type\":\"int\"},{\"name\":\"brakesTemperature\",\"type\":{\"type\":\"array\",\"items\":\"int\"}},{\"name\":\"tyresSurfaceTemperature\",\"type\":{\"type\":\"array\",\"items\":\"int\"}},{\"name\":\"tyresInnerTemperature\",\"type\":{\"type\":\"array\",\"items\":\"int\"}},{\"name\":\"engineTemperature\",\"type\":\"int\"},{\"name\":\"tyresPressure\",\"type\":{\"type\":\"array\",\"items\":\"float\"}},{\"name\":\"surfaceType\",\"type\":{\"type\":\"array\",\"items\":\"int\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<CarTelemetryData> ENCODER =
      new BinaryMessageEncoder<CarTelemetryData>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<CarTelemetryData> DECODER =
      new BinaryMessageDecoder<CarTelemetryData>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<CarTelemetryData> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<CarTelemetryData> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<CarTelemetryData> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<CarTelemetryData>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this CarTelemetryData to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a CarTelemetryData from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a CarTelemetryData instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static CarTelemetryData fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private int speed;
   private float throttle;
   private float steer;
   private float brake;
   private int clutch;
   private int gear;
   private int engineRPM;
   private int drs;
   private int revLightsPercent;
   private int revLightsBitValue;
   private java.util.List<java.lang.Integer> brakesTemperature;
   private java.util.List<java.lang.Integer> tyresSurfaceTemperature;
   private java.util.List<java.lang.Integer> tyresInnerTemperature;
   private int engineTemperature;
   private java.util.List<java.lang.Float> tyresPressure;
   private java.util.List<java.lang.Integer> surfaceType;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public CarTelemetryData() {}

  /**
   * All-args constructor.
   * @param speed The new value for speed
   * @param throttle The new value for throttle
   * @param steer The new value for steer
   * @param brake The new value for brake
   * @param clutch The new value for clutch
   * @param gear The new value for gear
   * @param engineRPM The new value for engineRPM
   * @param drs The new value for drs
   * @param revLightsPercent The new value for revLightsPercent
   * @param revLightsBitValue The new value for revLightsBitValue
   * @param brakesTemperature The new value for brakesTemperature
   * @param tyresSurfaceTemperature The new value for tyresSurfaceTemperature
   * @param tyresInnerTemperature The new value for tyresInnerTemperature
   * @param engineTemperature The new value for engineTemperature
   * @param tyresPressure The new value for tyresPressure
   * @param surfaceType The new value for surfaceType
   */
  public CarTelemetryData(java.lang.Integer speed, java.lang.Float throttle, java.lang.Float steer, java.lang.Float brake, java.lang.Integer clutch, java.lang.Integer gear, java.lang.Integer engineRPM, java.lang.Integer drs, java.lang.Integer revLightsPercent, java.lang.Integer revLightsBitValue, java.util.List<java.lang.Integer> brakesTemperature, java.util.List<java.lang.Integer> tyresSurfaceTemperature, java.util.List<java.lang.Integer> tyresInnerTemperature, java.lang.Integer engineTemperature, java.util.List<java.lang.Float> tyresPressure, java.util.List<java.lang.Integer> surfaceType) {
    this.speed = speed;
    this.throttle = throttle;
    this.steer = steer;
    this.brake = brake;
    this.clutch = clutch;
    this.gear = gear;
    this.engineRPM = engineRPM;
    this.drs = drs;
    this.revLightsPercent = revLightsPercent;
    this.revLightsBitValue = revLightsBitValue;
    this.brakesTemperature = brakesTemperature;
    this.tyresSurfaceTemperature = tyresSurfaceTemperature;
    this.tyresInnerTemperature = tyresInnerTemperature;
    this.engineTemperature = engineTemperature;
    this.tyresPressure = tyresPressure;
    this.surfaceType = surfaceType;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return speed;
    case 1: return throttle;
    case 2: return steer;
    case 3: return brake;
    case 4: return clutch;
    case 5: return gear;
    case 6: return engineRPM;
    case 7: return drs;
    case 8: return revLightsPercent;
    case 9: return revLightsBitValue;
    case 10: return brakesTemperature;
    case 11: return tyresSurfaceTemperature;
    case 12: return tyresInnerTemperature;
    case 13: return engineTemperature;
    case 14: return tyresPressure;
    case 15: return surfaceType;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: speed = (java.lang.Integer)value$; break;
    case 1: throttle = (java.lang.Float)value$; break;
    case 2: steer = (java.lang.Float)value$; break;
    case 3: brake = (java.lang.Float)value$; break;
    case 4: clutch = (java.lang.Integer)value$; break;
    case 5: gear = (java.lang.Integer)value$; break;
    case 6: engineRPM = (java.lang.Integer)value$; break;
    case 7: drs = (java.lang.Integer)value$; break;
    case 8: revLightsPercent = (java.lang.Integer)value$; break;
    case 9: revLightsBitValue = (java.lang.Integer)value$; break;
    case 10: brakesTemperature = (java.util.List<java.lang.Integer>)value$; break;
    case 11: tyresSurfaceTemperature = (java.util.List<java.lang.Integer>)value$; break;
    case 12: tyresInnerTemperature = (java.util.List<java.lang.Integer>)value$; break;
    case 13: engineTemperature = (java.lang.Integer)value$; break;
    case 14: tyresPressure = (java.util.List<java.lang.Float>)value$; break;
    case 15: surfaceType = (java.util.List<java.lang.Integer>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'speed' field.
   * @return The value of the 'speed' field.
   */
  public int getSpeed() {
    return speed;
  }


  /**
   * Sets the value of the 'speed' field.
   * @param value the value to set.
   */
  public void setSpeed(int value) {
    this.speed = value;
  }

  /**
   * Gets the value of the 'throttle' field.
   * @return The value of the 'throttle' field.
   */
  public float getThrottle() {
    return throttle;
  }


  /**
   * Sets the value of the 'throttle' field.
   * @param value the value to set.
   */
  public void setThrottle(float value) {
    this.throttle = value;
  }

  /**
   * Gets the value of the 'steer' field.
   * @return The value of the 'steer' field.
   */
  public float getSteer() {
    return steer;
  }


  /**
   * Sets the value of the 'steer' field.
   * @param value the value to set.
   */
  public void setSteer(float value) {
    this.steer = value;
  }

  /**
   * Gets the value of the 'brake' field.
   * @return The value of the 'brake' field.
   */
  public float getBrake() {
    return brake;
  }


  /**
   * Sets the value of the 'brake' field.
   * @param value the value to set.
   */
  public void setBrake(float value) {
    this.brake = value;
  }

  /**
   * Gets the value of the 'clutch' field.
   * @return The value of the 'clutch' field.
   */
  public int getClutch() {
    return clutch;
  }


  /**
   * Sets the value of the 'clutch' field.
   * @param value the value to set.
   */
  public void setClutch(int value) {
    this.clutch = value;
  }

  /**
   * Gets the value of the 'gear' field.
   * @return The value of the 'gear' field.
   */
  public int getGear() {
    return gear;
  }


  /**
   * Sets the value of the 'gear' field.
   * @param value the value to set.
   */
  public void setGear(int value) {
    this.gear = value;
  }

  /**
   * Gets the value of the 'engineRPM' field.
   * @return The value of the 'engineRPM' field.
   */
  public int getEngineRPM() {
    return engineRPM;
  }


  /**
   * Sets the value of the 'engineRPM' field.
   * @param value the value to set.
   */
  public void setEngineRPM(int value) {
    this.engineRPM = value;
  }

  /**
   * Gets the value of the 'drs' field.
   * @return The value of the 'drs' field.
   */
  public int getDrs() {
    return drs;
  }


  /**
   * Sets the value of the 'drs' field.
   * @param value the value to set.
   */
  public void setDrs(int value) {
    this.drs = value;
  }

  /**
   * Gets the value of the 'revLightsPercent' field.
   * @return The value of the 'revLightsPercent' field.
   */
  public int getRevLightsPercent() {
    return revLightsPercent;
  }


  /**
   * Sets the value of the 'revLightsPercent' field.
   * @param value the value to set.
   */
  public void setRevLightsPercent(int value) {
    this.revLightsPercent = value;
  }

  /**
   * Gets the value of the 'revLightsBitValue' field.
   * @return The value of the 'revLightsBitValue' field.
   */
  public int getRevLightsBitValue() {
    return revLightsBitValue;
  }


  /**
   * Sets the value of the 'revLightsBitValue' field.
   * @param value the value to set.
   */
  public void setRevLightsBitValue(int value) {
    this.revLightsBitValue = value;
  }

  /**
   * Gets the value of the 'brakesTemperature' field.
   * @return The value of the 'brakesTemperature' field.
   */
  public java.util.List<java.lang.Integer> getBrakesTemperature() {
    return brakesTemperature;
  }


  /**
   * Sets the value of the 'brakesTemperature' field.
   * @param value the value to set.
   */
  public void setBrakesTemperature(java.util.List<java.lang.Integer> value) {
    this.brakesTemperature = value;
  }

  /**
   * Gets the value of the 'tyresSurfaceTemperature' field.
   * @return The value of the 'tyresSurfaceTemperature' field.
   */
  public java.util.List<java.lang.Integer> getTyresSurfaceTemperature() {
    return tyresSurfaceTemperature;
  }


  /**
   * Sets the value of the 'tyresSurfaceTemperature' field.
   * @param value the value to set.
   */
  public void setTyresSurfaceTemperature(java.util.List<java.lang.Integer> value) {
    this.tyresSurfaceTemperature = value;
  }

  /**
   * Gets the value of the 'tyresInnerTemperature' field.
   * @return The value of the 'tyresInnerTemperature' field.
   */
  public java.util.List<java.lang.Integer> getTyresInnerTemperature() {
    return tyresInnerTemperature;
  }


  /**
   * Sets the value of the 'tyresInnerTemperature' field.
   * @param value the value to set.
   */
  public void setTyresInnerTemperature(java.util.List<java.lang.Integer> value) {
    this.tyresInnerTemperature = value;
  }

  /**
   * Gets the value of the 'engineTemperature' field.
   * @return The value of the 'engineTemperature' field.
   */
  public int getEngineTemperature() {
    return engineTemperature;
  }


  /**
   * Sets the value of the 'engineTemperature' field.
   * @param value the value to set.
   */
  public void setEngineTemperature(int value) {
    this.engineTemperature = value;
  }

  /**
   * Gets the value of the 'tyresPressure' field.
   * @return The value of the 'tyresPressure' field.
   */
  public java.util.List<java.lang.Float> getTyresPressure() {
    return tyresPressure;
  }


  /**
   * Sets the value of the 'tyresPressure' field.
   * @param value the value to set.
   */
  public void setTyresPressure(java.util.List<java.lang.Float> value) {
    this.tyresPressure = value;
  }

  /**
   * Gets the value of the 'surfaceType' field.
   * @return The value of the 'surfaceType' field.
   */
  public java.util.List<java.lang.Integer> getSurfaceType() {
    return surfaceType;
  }


  /**
   * Sets the value of the 'surfaceType' field.
   * @param value the value to set.
   */
  public void setSurfaceType(java.util.List<java.lang.Integer> value) {
    this.surfaceType = value;
  }

  /**
   * Creates a new CarTelemetryData RecordBuilder.
   * @return A new CarTelemetryData RecordBuilder
   */
  public static ai.tecton.telemetry.avro.CarTelemetryData.Builder newBuilder() {
    return new ai.tecton.telemetry.avro.CarTelemetryData.Builder();
  }

  /**
   * Creates a new CarTelemetryData RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new CarTelemetryData RecordBuilder
   */
  public static ai.tecton.telemetry.avro.CarTelemetryData.Builder newBuilder(ai.tecton.telemetry.avro.CarTelemetryData.Builder other) {
    if (other == null) {
      return new ai.tecton.telemetry.avro.CarTelemetryData.Builder();
    } else {
      return new ai.tecton.telemetry.avro.CarTelemetryData.Builder(other);
    }
  }

  /**
   * Creates a new CarTelemetryData RecordBuilder by copying an existing CarTelemetryData instance.
   * @param other The existing instance to copy.
   * @return A new CarTelemetryData RecordBuilder
   */
  public static ai.tecton.telemetry.avro.CarTelemetryData.Builder newBuilder(ai.tecton.telemetry.avro.CarTelemetryData other) {
    if (other == null) {
      return new ai.tecton.telemetry.avro.CarTelemetryData.Builder();
    } else {
      return new ai.tecton.telemetry.avro.CarTelemetryData.Builder(other);
    }
  }

  /**
   * RecordBuilder for CarTelemetryData instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<CarTelemetryData>
    implements org.apache.avro.data.RecordBuilder<CarTelemetryData> {

    private int speed;
    private float throttle;
    private float steer;
    private float brake;
    private int clutch;
    private int gear;
    private int engineRPM;
    private int drs;
    private int revLightsPercent;
    private int revLightsBitValue;
    private java.util.List<java.lang.Integer> brakesTemperature;
    private java.util.List<java.lang.Integer> tyresSurfaceTemperature;
    private java.util.List<java.lang.Integer> tyresInnerTemperature;
    private int engineTemperature;
    private java.util.List<java.lang.Float> tyresPressure;
    private java.util.List<java.lang.Integer> surfaceType;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(ai.tecton.telemetry.avro.CarTelemetryData.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.speed)) {
        this.speed = data().deepCopy(fields()[0].schema(), other.speed);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.throttle)) {
        this.throttle = data().deepCopy(fields()[1].schema(), other.throttle);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.steer)) {
        this.steer = data().deepCopy(fields()[2].schema(), other.steer);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.brake)) {
        this.brake = data().deepCopy(fields()[3].schema(), other.brake);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.clutch)) {
        this.clutch = data().deepCopy(fields()[4].schema(), other.clutch);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.gear)) {
        this.gear = data().deepCopy(fields()[5].schema(), other.gear);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.engineRPM)) {
        this.engineRPM = data().deepCopy(fields()[6].schema(), other.engineRPM);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.drs)) {
        this.drs = data().deepCopy(fields()[7].schema(), other.drs);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.revLightsPercent)) {
        this.revLightsPercent = data().deepCopy(fields()[8].schema(), other.revLightsPercent);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.revLightsBitValue)) {
        this.revLightsBitValue = data().deepCopy(fields()[9].schema(), other.revLightsBitValue);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.brakesTemperature)) {
        this.brakesTemperature = data().deepCopy(fields()[10].schema(), other.brakesTemperature);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (isValidValue(fields()[11], other.tyresSurfaceTemperature)) {
        this.tyresSurfaceTemperature = data().deepCopy(fields()[11].schema(), other.tyresSurfaceTemperature);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
      if (isValidValue(fields()[12], other.tyresInnerTemperature)) {
        this.tyresInnerTemperature = data().deepCopy(fields()[12].schema(), other.tyresInnerTemperature);
        fieldSetFlags()[12] = other.fieldSetFlags()[12];
      }
      if (isValidValue(fields()[13], other.engineTemperature)) {
        this.engineTemperature = data().deepCopy(fields()[13].schema(), other.engineTemperature);
        fieldSetFlags()[13] = other.fieldSetFlags()[13];
      }
      if (isValidValue(fields()[14], other.tyresPressure)) {
        this.tyresPressure = data().deepCopy(fields()[14].schema(), other.tyresPressure);
        fieldSetFlags()[14] = other.fieldSetFlags()[14];
      }
      if (isValidValue(fields()[15], other.surfaceType)) {
        this.surfaceType = data().deepCopy(fields()[15].schema(), other.surfaceType);
        fieldSetFlags()[15] = other.fieldSetFlags()[15];
      }
    }

    /**
     * Creates a Builder by copying an existing CarTelemetryData instance
     * @param other The existing instance to copy.
     */
    private Builder(ai.tecton.telemetry.avro.CarTelemetryData other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.speed)) {
        this.speed = data().deepCopy(fields()[0].schema(), other.speed);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.throttle)) {
        this.throttle = data().deepCopy(fields()[1].schema(), other.throttle);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.steer)) {
        this.steer = data().deepCopy(fields()[2].schema(), other.steer);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.brake)) {
        this.brake = data().deepCopy(fields()[3].schema(), other.brake);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.clutch)) {
        this.clutch = data().deepCopy(fields()[4].schema(), other.clutch);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.gear)) {
        this.gear = data().deepCopy(fields()[5].schema(), other.gear);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.engineRPM)) {
        this.engineRPM = data().deepCopy(fields()[6].schema(), other.engineRPM);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.drs)) {
        this.drs = data().deepCopy(fields()[7].schema(), other.drs);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.revLightsPercent)) {
        this.revLightsPercent = data().deepCopy(fields()[8].schema(), other.revLightsPercent);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.revLightsBitValue)) {
        this.revLightsBitValue = data().deepCopy(fields()[9].schema(), other.revLightsBitValue);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.brakesTemperature)) {
        this.brakesTemperature = data().deepCopy(fields()[10].schema(), other.brakesTemperature);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.tyresSurfaceTemperature)) {
        this.tyresSurfaceTemperature = data().deepCopy(fields()[11].schema(), other.tyresSurfaceTemperature);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.tyresInnerTemperature)) {
        this.tyresInnerTemperature = data().deepCopy(fields()[12].schema(), other.tyresInnerTemperature);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.engineTemperature)) {
        this.engineTemperature = data().deepCopy(fields()[13].schema(), other.engineTemperature);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.tyresPressure)) {
        this.tyresPressure = data().deepCopy(fields()[14].schema(), other.tyresPressure);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.surfaceType)) {
        this.surfaceType = data().deepCopy(fields()[15].schema(), other.surfaceType);
        fieldSetFlags()[15] = true;
      }
    }

    /**
      * Gets the value of the 'speed' field.
      * @return The value.
      */
    public int getSpeed() {
      return speed;
    }


    /**
      * Sets the value of the 'speed' field.
      * @param value The value of 'speed'.
      * @return This builder.
      */
    public ai.tecton.telemetry.avro.CarTelemetryData.Builder setSpeed(int value) {
      validate(fields()[0], value);
      this.speed = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'speed' field has been set.
      * @return True if the 'speed' field has been set, false otherwise.
      */
    public boolean hasSpeed() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'speed' field.
      * @return This builder.
      */
    public ai.tecton.telemetry.avro.CarTelemetryData.Builder clearSpeed() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'throttle' field.
      * @return The value.
      */
    public float getThrottle() {
      return throttle;
    }


    /**
      * Sets the value of the 'throttle' field.
      * @param value The value of 'throttle'.
      * @return This builder.
      */
    public ai.tecton.telemetry.avro.CarTelemetryData.Builder setThrottle(float value) {
      validate(fields()[1], value);
      this.throttle = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'throttle' field has been set.
      * @return True if the 'throttle' field has been set, false otherwise.
      */
    public boolean hasThrottle() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'throttle' field.
      * @return This builder.
      */
    public ai.tecton.telemetry.avro.CarTelemetryData.Builder clearThrottle() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'steer' field.
      * @return The value.
      */
    public float getSteer() {
      return steer;
    }


    /**
      * Sets the value of the 'steer' field.
      * @param value The value of 'steer'.
      * @return This builder.
      */
    public ai.tecton.telemetry.avro.CarTelemetryData.Builder setSteer(float value) {
      validate(fields()[2], value);
      this.steer = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'steer' field has been set.
      * @return True if the 'steer' field has been set, false otherwise.
      */
    public boolean hasSteer() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'steer' field.
      * @return This builder.
      */
    public ai.tecton.telemetry.avro.CarTelemetryData.Builder clearSteer() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'brake' field.
      * @return The value.
      */
    public float getBrake() {
      return brake;
    }


    /**
      * Sets the value of the 'brake' field.
      * @param value The value of 'brake'.
      * @return This builder.
      */
    public ai.tecton.telemetry.avro.CarTelemetryData.Builder setBrake(float value) {
      validate(fields()[3], value);
      this.brake = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'brake' field has been set.
      * @return True if the 'brake' field has been set, false otherwise.
      */
    public boolean hasBrake() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'brake' field.
      * @return This builder.
      */
    public ai.tecton.telemetry.avro.CarTelemetryData.Builder clearBrake() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'clutch' field.
      * @return The value.
      */
    public int getClutch() {
      return clutch;
    }


    /**
      * Sets the value of the 'clutch' field.
      * @param value The value of 'clutch'.
      * @return This builder.
      */
    public ai.tecton.telemetry.avro.CarTelemetryData.Builder setClutch(int value) {
      validate(fields()[4], value);
      this.clutch = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'clutch' field has been set.
      * @return True if the 'clutch' field has been set, false otherwise.
      */
    public boolean hasClutch() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'clutch' field.
      * @return This builder.
      */
    public ai.tecton.telemetry.avro.CarTelemetryData.Builder clearClutch() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'gear' field.
      * @return The value.
      */
    public int getGear() {
      return gear;
    }


    /**
      * Sets the value of the 'gear' field.
      * @param value The value of 'gear'.
      * @return This builder.
      */
    public ai.tecton.telemetry.avro.CarTelemetryData.Builder setGear(int value) {
      validate(fields()[5], value);
      this.gear = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'gear' field has been set.
      * @return True if the 'gear' field has been set, false otherwise.
      */
    public boolean hasGear() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'gear' field.
      * @return This builder.
      */
    public ai.tecton.telemetry.avro.CarTelemetryData.Builder clearGear() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'engineRPM' field.
      * @return The value.
      */
    public int getEngineRPM() {
      return engineRPM;
    }


    /**
      * Sets the value of the 'engineRPM' field.
      * @param value The value of 'engineRPM'.
      * @return This builder.
      */
    public ai.tecton.telemetry.avro.CarTelemetryData.Builder setEngineRPM(int value) {
      validate(fields()[6], value);
      this.engineRPM = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'engineRPM' field has been set.
      * @return True if the 'engineRPM' field has been set, false otherwise.
      */
    public boolean hasEngineRPM() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'engineRPM' field.
      * @return This builder.
      */
    public ai.tecton.telemetry.avro.CarTelemetryData.Builder clearEngineRPM() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'drs' field.
      * @return The value.
      */
    public int getDrs() {
      return drs;
    }


    /**
      * Sets the value of the 'drs' field.
      * @param value The value of 'drs'.
      * @return This builder.
      */
    public ai.tecton.telemetry.avro.CarTelemetryData.Builder setDrs(int value) {
      validate(fields()[7], value);
      this.drs = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'drs' field has been set.
      * @return True if the 'drs' field has been set, false otherwise.
      */
    public boolean hasDrs() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'drs' field.
      * @return This builder.
      */
    public ai.tecton.telemetry.avro.CarTelemetryData.Builder clearDrs() {
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'revLightsPercent' field.
      * @return The value.
      */
    public int getRevLightsPercent() {
      return revLightsPercent;
    }


    /**
      * Sets the value of the 'revLightsPercent' field.
      * @param value The value of 'revLightsPercent'.
      * @return This builder.
      */
    public ai.tecton.telemetry.avro.CarTelemetryData.Builder setRevLightsPercent(int value) {
      validate(fields()[8], value);
      this.revLightsPercent = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'revLightsPercent' field has been set.
      * @return True if the 'revLightsPercent' field has been set, false otherwise.
      */
    public boolean hasRevLightsPercent() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'revLightsPercent' field.
      * @return This builder.
      */
    public ai.tecton.telemetry.avro.CarTelemetryData.Builder clearRevLightsPercent() {
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'revLightsBitValue' field.
      * @return The value.
      */
    public int getRevLightsBitValue() {
      return revLightsBitValue;
    }


    /**
      * Sets the value of the 'revLightsBitValue' field.
      * @param value The value of 'revLightsBitValue'.
      * @return This builder.
      */
    public ai.tecton.telemetry.avro.CarTelemetryData.Builder setRevLightsBitValue(int value) {
      validate(fields()[9], value);
      this.revLightsBitValue = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'revLightsBitValue' field has been set.
      * @return True if the 'revLightsBitValue' field has been set, false otherwise.
      */
    public boolean hasRevLightsBitValue() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'revLightsBitValue' field.
      * @return This builder.
      */
    public ai.tecton.telemetry.avro.CarTelemetryData.Builder clearRevLightsBitValue() {
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'brakesTemperature' field.
      * @return The value.
      */
    public java.util.List<java.lang.Integer> getBrakesTemperature() {
      return brakesTemperature;
    }


    /**
      * Sets the value of the 'brakesTemperature' field.
      * @param value The value of 'brakesTemperature'.
      * @return This builder.
      */
    public ai.tecton.telemetry.avro.CarTelemetryData.Builder setBrakesTemperature(java.util.List<java.lang.Integer> value) {
      validate(fields()[10], value);
      this.brakesTemperature = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'brakesTemperature' field has been set.
      * @return True if the 'brakesTemperature' field has been set, false otherwise.
      */
    public boolean hasBrakesTemperature() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'brakesTemperature' field.
      * @return This builder.
      */
    public ai.tecton.telemetry.avro.CarTelemetryData.Builder clearBrakesTemperature() {
      brakesTemperature = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'tyresSurfaceTemperature' field.
      * @return The value.
      */
    public java.util.List<java.lang.Integer> getTyresSurfaceTemperature() {
      return tyresSurfaceTemperature;
    }


    /**
      * Sets the value of the 'tyresSurfaceTemperature' field.
      * @param value The value of 'tyresSurfaceTemperature'.
      * @return This builder.
      */
    public ai.tecton.telemetry.avro.CarTelemetryData.Builder setTyresSurfaceTemperature(java.util.List<java.lang.Integer> value) {
      validate(fields()[11], value);
      this.tyresSurfaceTemperature = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'tyresSurfaceTemperature' field has been set.
      * @return True if the 'tyresSurfaceTemperature' field has been set, false otherwise.
      */
    public boolean hasTyresSurfaceTemperature() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'tyresSurfaceTemperature' field.
      * @return This builder.
      */
    public ai.tecton.telemetry.avro.CarTelemetryData.Builder clearTyresSurfaceTemperature() {
      tyresSurfaceTemperature = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'tyresInnerTemperature' field.
      * @return The value.
      */
    public java.util.List<java.lang.Integer> getTyresInnerTemperature() {
      return tyresInnerTemperature;
    }


    /**
      * Sets the value of the 'tyresInnerTemperature' field.
      * @param value The value of 'tyresInnerTemperature'.
      * @return This builder.
      */
    public ai.tecton.telemetry.avro.CarTelemetryData.Builder setTyresInnerTemperature(java.util.List<java.lang.Integer> value) {
      validate(fields()[12], value);
      this.tyresInnerTemperature = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'tyresInnerTemperature' field has been set.
      * @return True if the 'tyresInnerTemperature' field has been set, false otherwise.
      */
    public boolean hasTyresInnerTemperature() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'tyresInnerTemperature' field.
      * @return This builder.
      */
    public ai.tecton.telemetry.avro.CarTelemetryData.Builder clearTyresInnerTemperature() {
      tyresInnerTemperature = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'engineTemperature' field.
      * @return The value.
      */
    public int getEngineTemperature() {
      return engineTemperature;
    }


    /**
      * Sets the value of the 'engineTemperature' field.
      * @param value The value of 'engineTemperature'.
      * @return This builder.
      */
    public ai.tecton.telemetry.avro.CarTelemetryData.Builder setEngineTemperature(int value) {
      validate(fields()[13], value);
      this.engineTemperature = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'engineTemperature' field has been set.
      * @return True if the 'engineTemperature' field has been set, false otherwise.
      */
    public boolean hasEngineTemperature() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'engineTemperature' field.
      * @return This builder.
      */
    public ai.tecton.telemetry.avro.CarTelemetryData.Builder clearEngineTemperature() {
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'tyresPressure' field.
      * @return The value.
      */
    public java.util.List<java.lang.Float> getTyresPressure() {
      return tyresPressure;
    }


    /**
      * Sets the value of the 'tyresPressure' field.
      * @param value The value of 'tyresPressure'.
      * @return This builder.
      */
    public ai.tecton.telemetry.avro.CarTelemetryData.Builder setTyresPressure(java.util.List<java.lang.Float> value) {
      validate(fields()[14], value);
      this.tyresPressure = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'tyresPressure' field has been set.
      * @return True if the 'tyresPressure' field has been set, false otherwise.
      */
    public boolean hasTyresPressure() {
      return fieldSetFlags()[14];
    }


    /**
      * Clears the value of the 'tyresPressure' field.
      * @return This builder.
      */
    public ai.tecton.telemetry.avro.CarTelemetryData.Builder clearTyresPressure() {
      tyresPressure = null;
      fieldSetFlags()[14] = false;
      return this;
    }

    /**
      * Gets the value of the 'surfaceType' field.
      * @return The value.
      */
    public java.util.List<java.lang.Integer> getSurfaceType() {
      return surfaceType;
    }


    /**
      * Sets the value of the 'surfaceType' field.
      * @param value The value of 'surfaceType'.
      * @return This builder.
      */
    public ai.tecton.telemetry.avro.CarTelemetryData.Builder setSurfaceType(java.util.List<java.lang.Integer> value) {
      validate(fields()[15], value);
      this.surfaceType = value;
      fieldSetFlags()[15] = true;
      return this;
    }

    /**
      * Checks whether the 'surfaceType' field has been set.
      * @return True if the 'surfaceType' field has been set, false otherwise.
      */
    public boolean hasSurfaceType() {
      return fieldSetFlags()[15];
    }


    /**
      * Clears the value of the 'surfaceType' field.
      * @return This builder.
      */
    public ai.tecton.telemetry.avro.CarTelemetryData.Builder clearSurfaceType() {
      surfaceType = null;
      fieldSetFlags()[15] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public CarTelemetryData build() {
      try {
        CarTelemetryData record = new CarTelemetryData();
        record.speed = fieldSetFlags()[0] ? this.speed : (java.lang.Integer) defaultValue(fields()[0]);
        record.throttle = fieldSetFlags()[1] ? this.throttle : (java.lang.Float) defaultValue(fields()[1]);
        record.steer = fieldSetFlags()[2] ? this.steer : (java.lang.Float) defaultValue(fields()[2]);
        record.brake = fieldSetFlags()[3] ? this.brake : (java.lang.Float) defaultValue(fields()[3]);
        record.clutch = fieldSetFlags()[4] ? this.clutch : (java.lang.Integer) defaultValue(fields()[4]);
        record.gear = fieldSetFlags()[5] ? this.gear : (java.lang.Integer) defaultValue(fields()[5]);
        record.engineRPM = fieldSetFlags()[6] ? this.engineRPM : (java.lang.Integer) defaultValue(fields()[6]);
        record.drs = fieldSetFlags()[7] ? this.drs : (java.lang.Integer) defaultValue(fields()[7]);
        record.revLightsPercent = fieldSetFlags()[8] ? this.revLightsPercent : (java.lang.Integer) defaultValue(fields()[8]);
        record.revLightsBitValue = fieldSetFlags()[9] ? this.revLightsBitValue : (java.lang.Integer) defaultValue(fields()[9]);
        record.brakesTemperature = fieldSetFlags()[10] ? this.brakesTemperature : (java.util.List<java.lang.Integer>) defaultValue(fields()[10]);
        record.tyresSurfaceTemperature = fieldSetFlags()[11] ? this.tyresSurfaceTemperature : (java.util.List<java.lang.Integer>) defaultValue(fields()[11]);
        record.tyresInnerTemperature = fieldSetFlags()[12] ? this.tyresInnerTemperature : (java.util.List<java.lang.Integer>) defaultValue(fields()[12]);
        record.engineTemperature = fieldSetFlags()[13] ? this.engineTemperature : (java.lang.Integer) defaultValue(fields()[13]);
        record.tyresPressure = fieldSetFlags()[14] ? this.tyresPressure : (java.util.List<java.lang.Float>) defaultValue(fields()[14]);
        record.surfaceType = fieldSetFlags()[15] ? this.surfaceType : (java.util.List<java.lang.Integer>) defaultValue(fields()[15]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<CarTelemetryData>
    WRITER$ = (org.apache.avro.io.DatumWriter<CarTelemetryData>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<CarTelemetryData>
    READER$ = (org.apache.avro.io.DatumReader<CarTelemetryData>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeInt(this.speed);

    out.writeFloat(this.throttle);

    out.writeFloat(this.steer);

    out.writeFloat(this.brake);

    out.writeInt(this.clutch);

    out.writeInt(this.gear);

    out.writeInt(this.engineRPM);

    out.writeInt(this.drs);

    out.writeInt(this.revLightsPercent);

    out.writeInt(this.revLightsBitValue);

    long size0 = this.brakesTemperature.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (java.lang.Integer e0: this.brakesTemperature) {
      actualSize0++;
      out.startItem();
      out.writeInt(e0);
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

    long size1 = this.tyresSurfaceTemperature.size();
    out.writeArrayStart();
    out.setItemCount(size1);
    long actualSize1 = 0;
    for (java.lang.Integer e1: this.tyresSurfaceTemperature) {
      actualSize1++;
      out.startItem();
      out.writeInt(e1);
    }
    out.writeArrayEnd();
    if (actualSize1 != size1)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size1 + ", but element count was " + actualSize1 + ".");

    long size2 = this.tyresInnerTemperature.size();
    out.writeArrayStart();
    out.setItemCount(size2);
    long actualSize2 = 0;
    for (java.lang.Integer e2: this.tyresInnerTemperature) {
      actualSize2++;
      out.startItem();
      out.writeInt(e2);
    }
    out.writeArrayEnd();
    if (actualSize2 != size2)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size2 + ", but element count was " + actualSize2 + ".");

    out.writeInt(this.engineTemperature);

    long size3 = this.tyresPressure.size();
    out.writeArrayStart();
    out.setItemCount(size3);
    long actualSize3 = 0;
    for (java.lang.Float e3: this.tyresPressure) {
      actualSize3++;
      out.startItem();
      out.writeFloat(e3);
    }
    out.writeArrayEnd();
    if (actualSize3 != size3)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size3 + ", but element count was " + actualSize3 + ".");

    long size4 = this.surfaceType.size();
    out.writeArrayStart();
    out.setItemCount(size4);
    long actualSize4 = 0;
    for (java.lang.Integer e4: this.surfaceType) {
      actualSize4++;
      out.startItem();
      out.writeInt(e4);
    }
    out.writeArrayEnd();
    if (actualSize4 != size4)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size4 + ", but element count was " + actualSize4 + ".");

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.speed = in.readInt();

      this.throttle = in.readFloat();

      this.steer = in.readFloat();

      this.brake = in.readFloat();

      this.clutch = in.readInt();

      this.gear = in.readInt();

      this.engineRPM = in.readInt();

      this.drs = in.readInt();

      this.revLightsPercent = in.readInt();

      this.revLightsBitValue = in.readInt();

      long size0 = in.readArrayStart();
      java.util.List<java.lang.Integer> a0 = this.brakesTemperature;
      if (a0 == null) {
        a0 = new SpecificData.Array<java.lang.Integer>((int)size0, SCHEMA$.getField("brakesTemperature").schema());
        this.brakesTemperature = a0;
      } else a0.clear();
      SpecificData.Array<java.lang.Integer> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Integer>)a0 : null);
      for ( ; 0 < size0; size0 = in.arrayNext()) {
        for ( ; size0 != 0; size0--) {
          java.lang.Integer e0 = (ga0 != null ? ga0.peek() : null);
          e0 = in.readInt();
          a0.add(e0);
        }
      }

      long size1 = in.readArrayStart();
      java.util.List<java.lang.Integer> a1 = this.tyresSurfaceTemperature;
      if (a1 == null) {
        a1 = new SpecificData.Array<java.lang.Integer>((int)size1, SCHEMA$.getField("tyresSurfaceTemperature").schema());
        this.tyresSurfaceTemperature = a1;
      } else a1.clear();
      SpecificData.Array<java.lang.Integer> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Integer>)a1 : null);
      for ( ; 0 < size1; size1 = in.arrayNext()) {
        for ( ; size1 != 0; size1--) {
          java.lang.Integer e1 = (ga1 != null ? ga1.peek() : null);
          e1 = in.readInt();
          a1.add(e1);
        }
      }

      long size2 = in.readArrayStart();
      java.util.List<java.lang.Integer> a2 = this.tyresInnerTemperature;
      if (a2 == null) {
        a2 = new SpecificData.Array<java.lang.Integer>((int)size2, SCHEMA$.getField("tyresInnerTemperature").schema());
        this.tyresInnerTemperature = a2;
      } else a2.clear();
      SpecificData.Array<java.lang.Integer> ga2 = (a2 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Integer>)a2 : null);
      for ( ; 0 < size2; size2 = in.arrayNext()) {
        for ( ; size2 != 0; size2--) {
          java.lang.Integer e2 = (ga2 != null ? ga2.peek() : null);
          e2 = in.readInt();
          a2.add(e2);
        }
      }

      this.engineTemperature = in.readInt();

      long size3 = in.readArrayStart();
      java.util.List<java.lang.Float> a3 = this.tyresPressure;
      if (a3 == null) {
        a3 = new SpecificData.Array<java.lang.Float>((int)size3, SCHEMA$.getField("tyresPressure").schema());
        this.tyresPressure = a3;
      } else a3.clear();
      SpecificData.Array<java.lang.Float> ga3 = (a3 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Float>)a3 : null);
      for ( ; 0 < size3; size3 = in.arrayNext()) {
        for ( ; size3 != 0; size3--) {
          java.lang.Float e3 = (ga3 != null ? ga3.peek() : null);
          e3 = in.readFloat();
          a3.add(e3);
        }
      }

      long size4 = in.readArrayStart();
      java.util.List<java.lang.Integer> a4 = this.surfaceType;
      if (a4 == null) {
        a4 = new SpecificData.Array<java.lang.Integer>((int)size4, SCHEMA$.getField("surfaceType").schema());
        this.surfaceType = a4;
      } else a4.clear();
      SpecificData.Array<java.lang.Integer> ga4 = (a4 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Integer>)a4 : null);
      for ( ; 0 < size4; size4 = in.arrayNext()) {
        for ( ; size4 != 0; size4--) {
          java.lang.Integer e4 = (ga4 != null ? ga4.peek() : null);
          e4 = in.readInt();
          a4.add(e4);
        }
      }

    } else {
      for (int i = 0; i < 16; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.speed = in.readInt();
          break;

        case 1:
          this.throttle = in.readFloat();
          break;

        case 2:
          this.steer = in.readFloat();
          break;

        case 3:
          this.brake = in.readFloat();
          break;

        case 4:
          this.clutch = in.readInt();
          break;

        case 5:
          this.gear = in.readInt();
          break;

        case 6:
          this.engineRPM = in.readInt();
          break;

        case 7:
          this.drs = in.readInt();
          break;

        case 8:
          this.revLightsPercent = in.readInt();
          break;

        case 9:
          this.revLightsBitValue = in.readInt();
          break;

        case 10:
          long size0 = in.readArrayStart();
          java.util.List<java.lang.Integer> a0 = this.brakesTemperature;
          if (a0 == null) {
            a0 = new SpecificData.Array<java.lang.Integer>((int)size0, SCHEMA$.getField("brakesTemperature").schema());
            this.brakesTemperature = a0;
          } else a0.clear();
          SpecificData.Array<java.lang.Integer> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Integer>)a0 : null);
          for ( ; 0 < size0; size0 = in.arrayNext()) {
            for ( ; size0 != 0; size0--) {
              java.lang.Integer e0 = (ga0 != null ? ga0.peek() : null);
              e0 = in.readInt();
              a0.add(e0);
            }
          }
          break;

        case 11:
          long size1 = in.readArrayStart();
          java.util.List<java.lang.Integer> a1 = this.tyresSurfaceTemperature;
          if (a1 == null) {
            a1 = new SpecificData.Array<java.lang.Integer>((int)size1, SCHEMA$.getField("tyresSurfaceTemperature").schema());
            this.tyresSurfaceTemperature = a1;
          } else a1.clear();
          SpecificData.Array<java.lang.Integer> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Integer>)a1 : null);
          for ( ; 0 < size1; size1 = in.arrayNext()) {
            for ( ; size1 != 0; size1--) {
              java.lang.Integer e1 = (ga1 != null ? ga1.peek() : null);
              e1 = in.readInt();
              a1.add(e1);
            }
          }
          break;

        case 12:
          long size2 = in.readArrayStart();
          java.util.List<java.lang.Integer> a2 = this.tyresInnerTemperature;
          if (a2 == null) {
            a2 = new SpecificData.Array<java.lang.Integer>((int)size2, SCHEMA$.getField("tyresInnerTemperature").schema());
            this.tyresInnerTemperature = a2;
          } else a2.clear();
          SpecificData.Array<java.lang.Integer> ga2 = (a2 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Integer>)a2 : null);
          for ( ; 0 < size2; size2 = in.arrayNext()) {
            for ( ; size2 != 0; size2--) {
              java.lang.Integer e2 = (ga2 != null ? ga2.peek() : null);
              e2 = in.readInt();
              a2.add(e2);
            }
          }
          break;

        case 13:
          this.engineTemperature = in.readInt();
          break;

        case 14:
          long size3 = in.readArrayStart();
          java.util.List<java.lang.Float> a3 = this.tyresPressure;
          if (a3 == null) {
            a3 = new SpecificData.Array<java.lang.Float>((int)size3, SCHEMA$.getField("tyresPressure").schema());
            this.tyresPressure = a3;
          } else a3.clear();
          SpecificData.Array<java.lang.Float> ga3 = (a3 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Float>)a3 : null);
          for ( ; 0 < size3; size3 = in.arrayNext()) {
            for ( ; size3 != 0; size3--) {
              java.lang.Float e3 = (ga3 != null ? ga3.peek() : null);
              e3 = in.readFloat();
              a3.add(e3);
            }
          }
          break;

        case 15:
          long size4 = in.readArrayStart();
          java.util.List<java.lang.Integer> a4 = this.surfaceType;
          if (a4 == null) {
            a4 = new SpecificData.Array<java.lang.Integer>((int)size4, SCHEMA$.getField("surfaceType").schema());
            this.surfaceType = a4;
          } else a4.clear();
          SpecificData.Array<java.lang.Integer> ga4 = (a4 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Integer>)a4 : null);
          for ( ; 0 < size4; size4 = in.arrayNext()) {
            for ( ; size4 != 0; size4--) {
              java.lang.Integer e4 = (ga4 != null ? ga4.peek() : null);
              e4 = in.readInt();
              a4.add(e4);
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










